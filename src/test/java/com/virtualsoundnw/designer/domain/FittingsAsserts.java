package com.virtualsoundnw.designer.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FittingsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFittingsAllPropertiesEquals(Fittings expected, Fittings actual) {
        assertFittingsAutoGeneratedPropertiesEquals(expected, actual);
        assertFittingsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFittingsAllUpdatablePropertiesEquals(Fittings expected, Fittings actual) {
        assertFittingsUpdatableFieldsEquals(expected, actual);
        assertFittingsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFittingsAutoGeneratedPropertiesEquals(Fittings expected, Fittings actual) {
        assertThat(actual)
            .as("Verify Fittings auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFittingsUpdatableFieldsEquals(Fittings expected, Fittings actual) {
        assertThat(actual)
            .as("Verify Fittings relevant properties")
            .satisfies(a -> assertThat(a.getFitting()).as("check fitting").isEqualTo(expected.getFitting()))
            .satisfies(a -> assertThat(a.getfShipId()).as("check fShipId").isEqualTo(expected.getfShipId()))
            .satisfies(a -> assertThat(a.getCount()).as("check count").isEqualTo(expected.getCount()))
            .satisfies(a -> assertThat(a.getMass()).as("check mass").isEqualTo(expected.getMass()))
            .satisfies(a -> assertThat(a.getCost()).as("check cost").isEqualTo(expected.getCost()))
            .satisfies(a -> assertThat(a.getArmored()).as("check armored").isEqualTo(expected.getArmored()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFittingsUpdatableRelationshipsEquals(Fittings expected, Fittings actual) {
        assertThat(actual)
            .as("Verify Fittings relationships")
            .satisfies(a -> assertThat(a.getShips()).as("check ships").isEqualTo(expected.getShips()));
    }
}
